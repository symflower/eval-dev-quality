package report

import (
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/zimmski/osutil/bytesutil"
)

func TestMarkdownWriteToFile(t *testing.T) {
	type testCase struct {
		Name string

		Markdown Markdown

		ExpectedReport string
		ExpectedError  error
	}

	validate := func(t *testing.T, tc *testCase) {
		t.Run(tc.Name, func(t *testing.T) {
			temporaryDirectory := t.TempDir()
			markdownFilePath := filepath.Join(temporaryDirectory, "REPORT.md")

			actualError := tc.Markdown.WriteToFile(markdownFilePath)
			assert.Equal(t, tc.ExpectedError, actualError)
			actualReport, err := os.ReadFile(markdownFilePath)
			assert.NoError(t, err)

			assert.Equalf(t, bytesutil.StringTrimIndentations(tc.ExpectedReport), string(actualReport), "Full output:\n%s", actualReport)
		})
	}

	testTimeString := "2000-01-01 00:00:00"
	testTime, err := time.Parse(time.DateTime, testTimeString)
	require.NoError(t, err)

	validate(t, &testCase{
		Name: "No Models",

		Markdown: Markdown{
			DateTime: testTime,
			Version:  "1234",
			Revision: "abcd",
		},

		ExpectedReport: `
			# Evaluation from 2000-01-01 00:00:00

			This report was generated by [DevQualityEval benchmark](https://github.com/symflower/eval-dev-quality) in ` + "`" + `version 1234` + "`" + ` - ` + "`" + `revision abcd` + "`" + `.

			## Results

			> Keep in mind that LLMs are nondeterministic. The following results just reflect a current snapshot.
		`,
	})

	validate(t, &testCase{
		Name: "Simple Models",

		Markdown: Markdown{
			DateTime: testTime,
			Version:  "1234",
			Revision: "abcd",
		},

		ExpectedReport: `
			# Evaluation from 2000-01-01 00:00:00

			This report was generated by [DevQualityEval benchmark](https://github.com/symflower/eval-dev-quality) in ` + "`" + `version 1234` + "`" + ` - ` + "`" + `revision abcd` + "`" + `.

			## Results

			> Keep in mind that LLMs are nondeterministic. The following results just reflect a current snapshot.
		`,
	})
}
