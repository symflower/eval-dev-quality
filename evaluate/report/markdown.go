package report

import (
	"errors"
	"io"
	"os"
	"path/filepath"
	"text/template"
	"time"

	pkgerrors "github.com/pkg/errors"
	"github.com/zimmski/osutil/bytesutil"
)

// Markdown holds the values for exporting a Markdown report.
type Markdown struct {
	// DateTime holds the timestamp of the evaluation.
	DateTime time.Time
	// Version holds the version of the evaluation tool.
	Version string
	// Revision holds the Git revision of the evaluation tool.
	Revision string
}

// markdownTemplateContext holds the template for a Markdown report.
type markdownTemplateContext struct {
	Markdown
}

// markdownTemplate holds the template for a Markdown report.
var markdownTemplate = template.Must(template.New("template-report").Parse(bytesutil.StringTrimIndentations(`
	# Evaluation from {{.DateTime.Format "2006-01-02 15:04:05"}}

	This report was generated by [DevQualityEval benchmark](https://github.com/symflower/eval-dev-quality) in ` + "`" + `version {{.Version}}` + "`" + ` - ` + "`" + `revision {{.Revision}}` + "`" + `.

	## Results

	> Keep in mind that LLMs are nondeterministic. The following results just reflect a current snapshot.
`)))

// format formats the markdown values in the template to the given writer.
func (m Markdown) format(writer io.Writer, markdownFileDirectoryPath string) (err error) {
	templateContext := markdownTemplateContext{
		Markdown: m,
	}

	if err := markdownTemplate.Execute(writer, templateContext); err != nil {
		return pkgerrors.WithStack(err)
	}

	return nil
}

// WriteToFile renders the Markdown to the given file.
func (m Markdown) WriteToFile(path string) (err error) {
	if err = os.MkdirAll(filepath.Dir(path), 0755); err != nil {
		return pkgerrors.WithStack(err)
	}
	file, err := os.Create(path)
	if err != nil {
		return pkgerrors.WithStack(err)
	}
	defer func() {
		if e := file.Close(); e != nil {
			e = pkgerrors.WithStack(e)
			if err == nil {
				err = e
			} else {
				err = errors.Join(err, e)
			}
		}
	}()

	if err := m.format(file, filepath.Dir(path)); err != nil {
		return pkgerrors.WithStack(err)
	}

	return nil
}
